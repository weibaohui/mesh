/*

 */

// Code generated by ___go_build_main_go. DO NOT EDIT.

package v1

import (
	"github.com/rancher/wrangler/pkg/generic"
	v1 "github.com/weibaohui/mesh/pkg/apis/mesh.oauthd.com/v1"
	clientset "github.com/weibaohui/mesh/pkg/generated/clientset/versioned/typed/mesh.oauthd.com/v1"
	informers "github.com/weibaohui/mesh/pkg/generated/informers/externalversions/mesh.oauthd.com/v1"
)

type Interface interface {
	App() AppController
	ClusterDomain() ClusterDomainController
	ExternalService() ExternalServiceController
	Feature() FeatureController
	Router() RouterController
	Service() ServiceController
}

func New(controllerManager *generic.ControllerManager, client clientset.MeshV1Interface,
	informers informers.Interface) Interface {
	return &version{
		controllerManager: controllerManager,
		client:            client,
		informers:         informers,
	}
}

type version struct {
	controllerManager *generic.ControllerManager
	informers         informers.Interface
	client            clientset.MeshV1Interface
}

func (c *version) App() AppController {
	return NewAppController(v1.SchemeGroupVersion.WithKind("App"), c.controllerManager, c.client, c.informers.Apps())
}
func (c *version) ClusterDomain() ClusterDomainController {
	return NewClusterDomainController(v1.SchemeGroupVersion.WithKind("ClusterDomain"), c.controllerManager, c.client, c.informers.ClusterDomains())
}
func (c *version) ExternalService() ExternalServiceController {
	return NewExternalServiceController(v1.SchemeGroupVersion.WithKind("ExternalService"), c.controllerManager, c.client, c.informers.ExternalServices())
}
func (c *version) Feature() FeatureController {
	return NewFeatureController(v1.SchemeGroupVersion.WithKind("Feature"), c.controllerManager, c.client, c.informers.Features())
}
func (c *version) Router() RouterController {
	return NewRouterController(v1.SchemeGroupVersion.WithKind("Router"), c.controllerManager, c.client, c.informers.Routers())
}
func (c *version) Service() ServiceController {
	return NewServiceController(v1.SchemeGroupVersion.WithKind("Service"), c.controllerManager, c.client, c.informers.Services())
}
