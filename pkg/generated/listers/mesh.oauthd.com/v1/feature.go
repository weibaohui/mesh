/*

 */

// Code generated by ___go_build_main_go. DO NOT EDIT.

package v1

import (
	v1 "github.com/weibaohui/mesh/pkg/apis/mesh.oauthd.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeatureLister helps list Features.
type FeatureLister interface {
	// List lists all Features in the indexer.
	List(selector labels.Selector) (ret []*v1.Feature, err error)
	// Features returns an object that can list and get Features.
	Features(namespace string) FeatureNamespaceLister
	FeatureListerExpansion
}

// featureLister implements the FeatureLister interface.
type featureLister struct {
	indexer cache.Indexer
}

// NewFeatureLister returns a new FeatureLister.
func NewFeatureLister(indexer cache.Indexer) FeatureLister {
	return &featureLister{indexer: indexer}
}

// List lists all Features in the indexer.
func (s *featureLister) List(selector labels.Selector) (ret []*v1.Feature, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Feature))
	})
	return ret, err
}

// Features returns an object that can list and get Features.
func (s *featureLister) Features(namespace string) FeatureNamespaceLister {
	return featureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FeatureNamespaceLister helps list and get Features.
type FeatureNamespaceLister interface {
	// List lists all Features in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Feature, err error)
	// Get retrieves the Feature from the indexer for a given namespace and name.
	Get(name string) (*v1.Feature, error)
	FeatureNamespaceListerExpansion
}

// featureNamespaceLister implements the FeatureNamespaceLister
// interface.
type featureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Features in the indexer for a given namespace.
func (s featureNamespaceLister) List(selector labels.Selector) (ret []*v1.Feature, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Feature))
	})
	return ret, err
}

// Get retrieves the Feature from the indexer for a given namespace and name.
func (s featureNamespaceLister) Get(name string) (*v1.Feature, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("feature"), name)
	}
	return obj.(*v1.Feature), nil
}
