/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/rancher/gitwatcher/pkg/apis/gitwatcher.cattle.io/v1"
	clientset "github.com/rancher/gitwatcher/pkg/generated/clientset/versioned/typed/gitwatcher.cattle.io/v1"
	informers "github.com/rancher/gitwatcher/pkg/generated/informers/externalversions/gitwatcher.cattle.io/v1"
	listers "github.com/rancher/gitwatcher/pkg/generated/listers/gitwatcher.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type GitWatcherHandler func(string, *v1.GitWatcher) (*v1.GitWatcher, error)

type GitWatcherController interface {
	GitWatcherClient

	OnChange(ctx context.Context, name string, sync GitWatcherHandler)
	OnRemove(ctx context.Context, name string, sync GitWatcherHandler)
	Enqueue(namespace, name string)

	Cache() GitWatcherCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type GitWatcherClient interface {
	Create(*v1.GitWatcher) (*v1.GitWatcher, error)
	Update(*v1.GitWatcher) (*v1.GitWatcher, error)
	UpdateStatus(*v1.GitWatcher) (*v1.GitWatcher, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.GitWatcher, error)
	List(namespace string, opts metav1.ListOptions) (*v1.GitWatcherList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitWatcher, err error)
}

type GitWatcherCache interface {
	Get(namespace, name string) (*v1.GitWatcher, error)
	List(namespace string, selector labels.Selector) ([]*v1.GitWatcher, error)

	AddIndexer(indexName string, indexer GitWatcherIndexer)
	GetByIndex(indexName, key string) ([]*v1.GitWatcher, error)
}

type GitWatcherIndexer func(obj *v1.GitWatcher) ([]string, error)

type gitWatcherController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.GitWatchersGetter
	informer          informers.GitWatcherInformer
	gvk               schema.GroupVersionKind
}

func NewGitWatcherController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.GitWatchersGetter, informer informers.GitWatcherInformer) GitWatcherController {
	return &gitWatcherController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromGitWatcherHandlerToHandler(sync GitWatcherHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.GitWatcher
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.GitWatcher))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *gitWatcherController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.GitWatcher))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateGitWatcherOnChange(updater generic.Updater, handler GitWatcherHandler) GitWatcherHandler {
	return func(key string, obj *v1.GitWatcher) (*v1.GitWatcher, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.GitWatcher)
			}
		}

		return copyObj, err
	}
}

func (c *gitWatcherController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *gitWatcherController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *gitWatcherController) OnChange(ctx context.Context, name string, sync GitWatcherHandler) {
	c.AddGenericHandler(ctx, name, FromGitWatcherHandlerToHandler(sync))
}

func (c *gitWatcherController) OnRemove(ctx context.Context, name string, sync GitWatcherHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromGitWatcherHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *gitWatcherController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, namespace, name)
}

func (c *gitWatcherController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *gitWatcherController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *gitWatcherController) Cache() GitWatcherCache {
	return &gitWatcherCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *gitWatcherController) Create(obj *v1.GitWatcher) (*v1.GitWatcher, error) {
	return c.clientGetter.GitWatchers(obj.Namespace).Create(obj)
}

func (c *gitWatcherController) Update(obj *v1.GitWatcher) (*v1.GitWatcher, error) {
	return c.clientGetter.GitWatchers(obj.Namespace).Update(obj)
}

func (c *gitWatcherController) UpdateStatus(obj *v1.GitWatcher) (*v1.GitWatcher, error) {
	return c.clientGetter.GitWatchers(obj.Namespace).UpdateStatus(obj)
}

func (c *gitWatcherController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.GitWatchers(namespace).Delete(name, options)
}

func (c *gitWatcherController) Get(namespace, name string, options metav1.GetOptions) (*v1.GitWatcher, error) {
	return c.clientGetter.GitWatchers(namespace).Get(name, options)
}

func (c *gitWatcherController) List(namespace string, opts metav1.ListOptions) (*v1.GitWatcherList, error) {
	return c.clientGetter.GitWatchers(namespace).List(opts)
}

func (c *gitWatcherController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.GitWatchers(namespace).Watch(opts)
}

func (c *gitWatcherController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitWatcher, err error) {
	return c.clientGetter.GitWatchers(namespace).Patch(name, pt, data, subresources...)
}

type gitWatcherCache struct {
	lister  listers.GitWatcherLister
	indexer cache.Indexer
}

func (c *gitWatcherCache) Get(namespace, name string) (*v1.GitWatcher, error) {
	return c.lister.GitWatchers(namespace).Get(name)
}

func (c *gitWatcherCache) List(namespace string, selector labels.Selector) ([]*v1.GitWatcher, error) {
	return c.lister.GitWatchers(namespace).List(selector)
}

func (c *gitWatcherCache) AddIndexer(indexName string, indexer GitWatcherIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.GitWatcher))
		},
	}))
}

func (c *gitWatcherCache) GetByIndex(indexName, key string) (result []*v1.GitWatcher, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.GitWatcher))
	}
	return result, nil
}
