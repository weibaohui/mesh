/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/gitwatcher/pkg/apis/gitwatcher.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitWatcherLister helps list GitWatchers.
type GitWatcherLister interface {
	// List lists all GitWatchers in the indexer.
	List(selector labels.Selector) (ret []*v1.GitWatcher, err error)
	// GitWatchers returns an object that can list and get GitWatchers.
	GitWatchers(namespace string) GitWatcherNamespaceLister
	GitWatcherListerExpansion
}

// gitWatcherLister implements the GitWatcherLister interface.
type gitWatcherLister struct {
	indexer cache.Indexer
}

// NewGitWatcherLister returns a new GitWatcherLister.
func NewGitWatcherLister(indexer cache.Indexer) GitWatcherLister {
	return &gitWatcherLister{indexer: indexer}
}

// List lists all GitWatchers in the indexer.
func (s *gitWatcherLister) List(selector labels.Selector) (ret []*v1.GitWatcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitWatcher))
	})
	return ret, err
}

// GitWatchers returns an object that can list and get GitWatchers.
func (s *gitWatcherLister) GitWatchers(namespace string) GitWatcherNamespaceLister {
	return gitWatcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitWatcherNamespaceLister helps list and get GitWatchers.
type GitWatcherNamespaceLister interface {
	// List lists all GitWatchers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.GitWatcher, err error)
	// Get retrieves the GitWatcher from the indexer for a given namespace and name.
	Get(name string) (*v1.GitWatcher, error)
	GitWatcherNamespaceListerExpansion
}

// gitWatcherNamespaceLister implements the GitWatcherNamespaceLister
// interface.
type gitWatcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitWatchers in the indexer for a given namespace.
func (s gitWatcherNamespaceLister) List(selector labels.Selector) (ret []*v1.GitWatcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GitWatcher))
	})
	return ret, err
}

// Get retrieves the GitWatcher from the indexer for a given namespace and name.
func (s gitWatcherNamespaceLister) Get(name string) (*v1.GitWatcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gitwatcher"), name)
	}
	return obj.(*v1.GitWatcher), nil
}
